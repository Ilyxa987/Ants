Index: core/src/com/mygdx/game/UnitsPack/Units.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/com/mygdx/game/UnitsPack/Units.java	(revision f1b03a352254b402147faa21315e0d35194deb2a)
+++ core/src/com/mygdx/game/UnitsPack/Units.java	(date 1611472904894)
@@ -2,17 +2,21 @@
 
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
+import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.mygdx.game.ItemsPack.Items;
 import com.mygdx.game.SkillsPack.Skills;
 
 public abstract class Units {
     public String name;
-    public int hitpoints;
+    public int hitpoints, Speed = 100;
     public int defence, damage;
-    public float x, y;
+    public float x, y, dx, dy;
     public Items items[];
     public Skills skills[];
     public Texture img;
+    public final int k = 25;
+    public int steps;
+    public boolean A = true;
 
     public Units(String name, float x, float y, Texture img) {
         this.img = img;
@@ -58,9 +62,13 @@
     }
 
     public void Move(float x, float y) {
-        this.x = x;
-        this.y = y;
+        steps = (int) (k * Math.sqrt((x - this.x) * (x - this.x) + (y - this.y) * (y - this.y)) / Speed);
+        dx = (x - this.x) / steps;
+        dy = (y - this.y) / steps;
+            this.x += dx;
+            this.y += dy;
     }
+    //TODO нужно разобраться с инвертированностью по игреку
 
     public void Attack(Units a) {
         int d;
Index: core/src/menu/Menu.java
===================================================================
--- core/src/menu/Menu.java	(revision f1b03a352254b402147faa21315e0d35194deb2a)
+++ core/src/com/mygdx/game/menu/Menu.java	(date 1611469614249)
@@ -1,4 +1,4 @@
-package menu;
+package com.mygdx.game.menu;
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Screen;
Index: core/src/menu/Buttons.java
===================================================================
--- core/src/menu/Buttons.java	(revision f1b03a352254b402147faa21315e0d35194deb2a)
+++ core/src/com/mygdx/game/menu/Buttons.java	(date 1611469698384)
@@ -1,4 +1,4 @@
-package menu;
+package com.mygdx.game.menu;
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Texture;
@@ -20,7 +20,7 @@
     public Buttons(final MyGame mygame) {
         game = mygame;
 
-        game1 = new Games(game);
+        game1 = new Games();
 
         buttonUpImage = new Texture("play.png");
         buttonDownImage = new Texture("play.png");
Index: core/src/com/mygdx/game/MyGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/com/mygdx/game/MyGame.java	(revision f1b03a352254b402147faa21315e0d35194deb2a)
+++ core/src/com/mygdx/game/MyGame.java	(date 1611469709025)
@@ -2,7 +2,7 @@
 
 import com.badlogic.gdx.Game;
 import com.mygdx.game.GameSc.Games;
-import menu.Menu;
+import com.mygdx.game.menu.Menu;
 
 
 public class MyGame extends Game {
@@ -14,7 +14,7 @@
 	@Override
 	public void create () {
         menu = new Menu(this);
-        games = new Games(this);
+        games = new Games();
         setScreen(menu);
 	}
 
Index: core/src/com/mygdx/game/GameSc/Games.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/com/mygdx/game/GameSc/Games.java	(revision f1b03a352254b402147faa21315e0d35194deb2a)
+++ core/src/com/mygdx/game/GameSc/Games.java	(date 1611472904905)
@@ -1,23 +1,26 @@
 package com.mygdx.game.GameSc;
 
 import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.InputProcessor;
 import com.badlogic.gdx.Screen;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
+import com.badlogic.gdx.math.Vector3;
 import com.mygdx.game.MyGame;
 import com.mygdx.game.UnitsPack.Player;
 
-public class Games implements Screen {
+public class Games implements Screen, InputProcessor {
     private SpriteBatch batch;
     private Texture pause, inventor;
-    final MyGame game;
     Player player;
     OrthographicCamera camera;
+    Vector3 touchPos;
+    Boolean A = false;
 
-    public Games(final MyGame mygame) {
-        game = mygame;
+
+    public Games() {
 
         batch = new SpriteBatch();
         camera = new OrthographicCamera();
@@ -26,6 +29,8 @@
         inventor = new Texture(Gdx.files.internal("inventor .png"));
 
         player = new Player("Player", 0, 0);
+        touchPos = new Vector3();
+        camera.unproject(touchPos);
     }
 
 
@@ -38,15 +43,19 @@
     public void render(float delta) {
         Gdx.gl.glClearColor(0, 0, 0, 1);
         Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
+        Gdx.input.setInputProcessor(this);
 
         camera.update();
 
         batch.begin();
         batch.draw(pause, 1350,600);
         batch.draw(inventor, 1360,500);
-        batch.end();
-
         player.draw(batch);
+        if (A = true) {
+            player.Move(touchPos.x, touchPos.y);
+        }
+        //TODO нужно сделать остановку
+        batch.end();
     }
 
     @Override
@@ -74,4 +83,47 @@
         batch.dispose();
         pause.dispose();
     }
+
+    @Override
+    public boolean keyDown(int keycode) {
+        return false;
+    }
+
+    @Override
+    public boolean keyUp(int keycode) {
+        return false;
+    }
+
+    @Override
+    public boolean keyTyped(char character) {
+        return false;
+    }
+
+    @Override
+    public boolean touchDown(int screenX, int screenY, int pointer, int button) {
+        System.out.println("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHH");
+        A = true;
+        touchPos.set(screenX, screenY, 0);
+        return A;
+    }
+
+    @Override
+    public boolean touchUp(int screenX, int screenY, int pointer, int button) {
+        return false;
+    }
+
+    @Override
+    public boolean touchDragged(int screenX, int screenY, int pointer) {
+        return false;
+    }
+
+    @Override
+    public boolean mouseMoved(int screenX, int screenY) {
+        return false;
+    }
+
+    @Override
+    public boolean scrolled(float amountX, float amountY) {
+        return false;
+    }
 }
